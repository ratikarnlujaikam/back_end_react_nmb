const express = require("express");
const router = express.Router();
const user = require("../database/models/user");

const bcrypt = require("bcryptjs"); //เอาพาสเวิร์ดที่ป้อนเข้าไปมาเข้ารหัส
const { getToken, verifyToken } = require("../passport/jwtHandler"); //ทำ JWT ให้system
const mailer = require("nodemailer");
const moment = require("moment");

//select
// router.get("/user", async (req, res) => {
//   try {
//     let result = await user.sequelize.query(`SELECT   [username]
//         ,[empNumber]
//         ,[position]
//         ,[email]
//         ,[createdAt]
//         ,[updatedAt]
//         FROM [TransportData].[dbo].[users]`);

//     res.json({
//       result: result[0],
//       api_result: "ok",
//     });
//   } catch (error) {
//     console.log(error);
//     res.json({
//       error,
//       api_result: "nok",
//     });
//   }
// });
router.get("/user", async (req, res) => {
  try {
    let result = await user.sequelize.query(`SELECT  [username]
    ,[empNumber]
    ,[password]
    ,[levelUser]
    ,[email]
    ,[position]
    ,[createdAt]
    ,[updatedAt]
FROM [Web_I4].[dbo].[users]`);

    res.json({
      result: result[0],
      api_result: "ok",
    });
  } catch (error) {
    console.log(error);
    res.json({
      error,
      api_result: "nok",
    });
  }
});

//insert
router.post("/register", async (req, res) => {
  try {
    //encrypt password
    req.body.password = bcrypt.hashSync(req.body.password, 8);

    //insert data into database
    let result = await user.create(req.body);
    // ใช้ async await เพื่อให้โปรแกรมรอให้บรรทัดแรกส่งให้เสร็จก่อน แล้วค่อยเอาค่าที่ได้ไปทำต่อ

    res.json({
      result: result,
      api_result: "ok",
    });
  } catch (error) {
    console.log(error);
    res.json({
      error,
      api_result: "nok",
    });
  }
});

//login
router.post("/login", async (req, res) => {
  try {
    const { empNumber, password } = req.body;
    //let result = await user.findAll({ where: {username} }) //หาทั้งหมด ได้ user ของทุกคนออกมา ส่งออกมาเป็น array
    let resultlogin = await user.findOne({ where: { empNumber } }); //หาแค่ตัวที่ต้องการ ส่งออกมาเป็น object
    //console.log(resultlogin);

    if (bcrypt.compareSync(password, resultlogin.password)) {
      //console.log(password);
      //console.log(resultlogin.password);
      let jwt = await getToken({ empNumber });
      res.json({
        jwt,
        login_result: "pass",
        resultlogin,
      });
    } else {
      res.json({
        login_result: "failed",
      });
    }
  } catch (error) {
    console.log(error);
    res.json({
      error,
      api_result: "nok",
    });
  }
});

//update
router.patch("/user", verifyToken, async (req, res) => {
  try {
    let { empNumber } = req.body;
    let result = await user.update(req.body, {
      where: {
        empNumber,
      },
    });
    res.json({
      result,
      api_result: "ok",
    });
  } catch (error) {
    console.log(error);
    res.json({
      error,
      api_result: "nok",
    });
  }
});

//delete
router.delete("/user", verifyToken, async (req, res) => {
  try {
    let { empNumber } = req.body;
    let result = await user.destroy({
      where: {
        empNumber,
      },
    });
    res.json({
      result,
      api_result: "ok",
    });
  } catch (error) {
    console.log(error);
    res.json({
      error,
      api_result: "nok",
    });
  }
});

router.post("/forgot", async (req, res) => {
  try {
    const { email } = req.body;
    const newPassword = await makeid(12);
    const password = await bcrypt.hashSync(newPassword, 8);
    await user.update({ password }, { where: { email } });
    let result = await user.findOne({ where: { email } });

    try {
      var smtp = {
        host: "10.120.10.42", //10.121.1.22 set to your host name or ip
        port: 25, //25, 465, 587 depend on your
        secure: false, // use SSL
      };

      var smtpTransport = mailer.createTransport(smtp);
      var mail = {
        from: "Server@minebea.co.th", //from email (option) '"Auto Create New Password" <Auto@Alarm.Example>'
        to: result.email.replace(/\.co\.th$/, ".com"), //to email (require)
        subject: "<Forgot password> re-created your new password", //subject
        html: `
        <p>Username : ${result.empNumber}</p>
        <p>new password : ${newPassword}</p>
        <p>Please note that this is a temporary password, randomly generated by the site. Please use "Change new password" page to update your password.</p>
        `,
      };
      console.log("result.email", result.email);
      console.log("result.empNumber", result.empNumber);

      await smtpTransport.sendMail(mail, function (error, _response) {
        smtpTransport.close();
        if (error) {
          //error handler
          console.log(error);
          res.json({
            error,
            api_result: "nok",
          });
        } else {
          res.json({
            api_result: "ok",
          });
        }
      });
    } catch (error) {
      console.log(error);
      res.json({
        error,
        api_result: "nok",
      });
    }
  } catch (error) {
    console.log(error);
    res.json({
      error,
      api_result: "nok",
    });
  }
});

router.post("/changePassword", async (req, res) => {
  try {
    const { empNumber, oldPassword, newPassword } = req.body;

    let resultlogin = await user.findOne({ where: { empNumber } }); //หาแค่ตัวที่ต้องการ ส่งออกมาเป็น object

    //console.log(resultlogin);
    if (bcrypt.compareSync(oldPassword, resultlogin.password)) {
      const password = await bcrypt.hashSync(newPassword, 8);
      await user.update({ password }, { where: { empNumber } });

      res.json({
        login_result: "pass",
        resultlogin,
      });
    } else {
      res.json({
        login_result: "failed",
      });
    }
  } catch (error) {
    console.log(error);
    res.json({
      error,
      api_result: "nok",
    });
  }
});

function makeid(length) {
  var result = "";
  var characters =
    "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
  var charactersLength = characters.length;
  for (var i = 0; i < length; i++) {
    result += characters.charAt(Math.floor(Math.random() * charactersLength));
  }
  return result;
}

module.exports = router;
